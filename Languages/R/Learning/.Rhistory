cat("Hello")
print("Hello")
print("Hellow")
print("What's up")
demo()
demo()
print("Hello")
print("hello")
print(2*3)
Imports:
dplyr,
ggvis
imports:
dplyr,
ggvis
install.packages("ggvis")
install.packages("Ggplot2")
2
install.packages("ggplot2")
new.function <- function(a) {
for(i in 1:a) {
b <- i^2
print(b)
}
}
doubler <- function(a){}
View(doubler)
View(new.function)
View(doubler)
View(doubler)
View(doubler)
function(a){}
print(cube(9))
print(3*4)
print(x)
source('~/.active-rstudio-document')
print(x)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
# Creating vector with c (combine or concatenate) funtion.
A <- c(10, 20, 30, 40)
A
typeof(A)
assign('A', 1, 2, 3, 4, 5)
assign('A', c(1, 2, 3, 4, 5))
assign('B', c(1, 2, 3, 4, 5))
assign('B', c(1.5, 2.5, 3.7, 4.8, 5.8))
B
grade <- c(90, 91, 68, 95, 96, 100, 100)
grade[1]
grade[1:4]
grade[-1]
grade <- c(90, 91, 68, 95, 96, 100, 100)
grade[1]
grade[1:4]
grade[c(1, 3, 4)] # Returns elem at 1, 3, 4
grade[-1]
grade[-2]
# With for loop
for (i in 1:length(grade)) { # If range is greater than the length of a vector, it just retuns NA for the rest.
print(grade[i])
}
# with seq_along() function. Sequence along a the vector
for (i in seq_along(grade)) {
print(grade[i])
}
# with seq_along() function. Sequence along a the vector
for (i in seq_along(grade)) {
print(grade[i])
}
# With Python fashion
for (g in grade) {
print(g)
}
# Matching Operator. Checks wheter element is in the vector
90 %in% grade
# Arithmetic operations on vector
score <- c(10, 45, 30, 50)
score+2
score
score = score*2
score
score = sqrt(score) # reduced to square root of each elem. Original has changed.
score
score =square(score)
score2 <- c(2, 3, 4, 5)
score+score2 # Adds the corresponding elements.
# Methods:
sum(score2)
# Arithmetic operations on vector
score <- c(10, 45, 30, 50)
score+2 # Scaled by adding 2 to each elem. Original has not changed
sqrt(score) # Square root of each elem.
score = score*2 # Changes original.
score2 <- c(2, 3, 4, 5)
score+score2 # Adds the corresponding elements. If one vector has shorter length. It only gives
# Methods:
sum(score2)
prod(score2) # Products of all elements
rev(score2) # Reverses
sort(score)
sort(score, decreasing = TRUE)
# Dot products of two vectors
score %*% score2
crossprod(score, score2) # Retuns dot products
score %o% score2 # The outer products of two vectors
# Vector Coersion
x <-c(10, 'John', 20, 30.75)
# R will coerce to turn this vector into the most convertible object type. All characters in this case
x
# When R cannot coerce
x <- 0:5
x
class(x)
# Logical Operators on vectors
x <- c(10, 45, 30, 50, 35)
y <- x>30
y
max(score)
min(score)
x <- factor(c('Male', 'Female', 'Male', 'Male', "Male"))
x
table(x) # Returns count of elem in each level
x <- c(4.258,-3.8432, 5.4456, 7.456, 9.5605)
abs(x)
ceiling(x) # Returns the next possible integer for each elem, in positive direction. So, for -3.8432, it will be 3
ln(x)
x <- c(4, 3, 6)
factorial(x) # for each elem
x <- rnorm(10)
x
x <-rnorm(10, mean = 20, sd=2)
x
x
A <- matrix(nrow = 2, ncol = 3)
A
dim(A) # gives dimension
# Can also be created with dim
m <- c(1, 2, 3, 4, 5, 6)
dim(m) <- c(2, 3) # Yes, here 2 and 3 are rows and columns
B <- matrix(c(1, 2, 3, 4, 5, 6)) # Created a 6 x 1 vector (1 rows because it is column-wise)
B
B <- matrix(c(1, 2, 3, 4, 5, 6), byrow = TRUE)
B
# With matrix and seq
m <- matrix(1:12, nrow = 2, ncol = 3)
m
# With matrix and seq
m <- matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE)
m
# With matrix and seq
m <- matrix(1:12, nrow = 4, ncol = 3)
m
C <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3, byrow = TRUE)
C
nrow(C) # Gives of
ncol(C)
length(C) # Number of elems in the matrix
# Initialize matrix dimensions
A <- matrix(4, nrow = 2, ncol = 3) # All slots will be filled with 4
A
# Matrix Diag function. diag(x, row, col)
m <- diag(1, 3, 3)
m
# Matrix Diag function. diag(x, row, col)
m <- diag(3, 3)
m
m <- diag(3, 4, 5)
m
m <- diag(1:3) # diagonal is 1 to 3 and the rests are 0. row and col are not needed. Figured from the range
m
m <- diag(1:5) # diagonal is 1 to 3 and the rests are 0. row and col are not needed. Figured from the seq range
m
# Giving names to rows and columns
m <- matrix(1:12, 4, 3, TRUE)
rownames(m) <- c('row1', 'row2', 'row3', 'row4')
colnames(m) <- c('col1', 'col2', 'col3')
m
rownames(m) <- c(1, 2, 3, 4)
colnames(m) <- c('A', 'B', 'C')
m
# Indexing matrices
A <- Matrix(1:10, 5, 2)
A
# Indexing matrices
A <- Matrix(1:10, 5, 2)
A
# Indexing matrices
A <- matrix(1:10, 5, 2)
A
A[1, 2] # [row, col]
A[1:nrow(A), 1:ncol(A)]
A[1, 2] = 9 # reassign
A = A[-nrow(A)] #Last col is deleted. Since negative is for exclusion, rows or cols can be deleted this way.
dim(A)
# Indexing matrices
A <- matrix(1:10, 5, 2)
A[1, 2] # [row, col]
A[1, ] # Entire first row
A[-1,] # All the rows excepts first one
A[, 2] # Entire 2nd col
A[nrow(A), ] # entire last row. Otherway with ncol() for the column
A[1:4, 1:2] # 4 rows and 2 columns
A[1:nrow(A), 1:ncol(A)] # Entire matrix
A[c(1, 3), ] # Entire first and third rows
A[1, 2] = 9 # reassign
A = A[-nrow(A)] #Last col is deleted. Since negative is for exclusion, rows or cols can be deleted this way.
dim(A)
A = A[-nrow(A), ] #Last col is deleted. Since negative is for exclusion, rows or cols can be deleted this way.
dim(A)
A[1, 2] = 9 # reassign
A = A[-nrow(A), ] #Last col is deleted. Since negative is for exclusion, rows or cols can be deleted this way.
dim(A)
A[1, 2] = 9 # reassign
A
# Indexing matrices
A <- matrix(1:10, 5, 2)
A[1, 2] # [row, col]
# Indexing matrices
A <- matrix(1:10, 5, 2)
A
A[1, 2] # [row, col]
A[1, ] # Entire first row
A[-1,] # All the rows excepts first one
A[, 2] # Entire 2nd col
A[ ,2] # Entire 2nd col
A[nrow(A), ] # entire last row. Otherway with ncol() for the column
A[1:4, 1:2] # 4 rows and 2 columns
A[1:nrow(A), 1:ncol(A)] # Entire matrix
A[c(1, 3), ] # Entire first and third rows
A[1, 2] = 9 # reassign
A
A = A[-nrow(A), ] #Last col is deleted. Since negative is for exclusion, rows or cols can be deleted this way.
A
nrow(A)
ncol(A)
dim(A)
# With matrix and seq
M2 <- matrix(1:12, 4, 3)
M2
storage.mode(num)
num = 45
typeof(num)
mode(num)
storage.mode(num)
class(name)
class(num) # Classification of objects, i.e. 'numeric' or 'character'
# Variables
name = "Jonny"
typeof(name)
is.character(name)
class(name)
num = 45
typeof(num)
mode(num) # Classification of objects, i.e. 'numeric' or 'character'
# Variables
num = 45
typeof(num)
mode(num) # Classification of objects, i.e. 'numeric' or 'character'
storage.mode(num) # gives the
class(num)
num2 = 4.5
class(num2)
mode(2.34)
x = as.integer(10)
typeof(x)
x = 10L
typeof(x)
x2 <- 5
1:x2 - 1 # Each element is subtracted by 1.
x <- rnorm(10)
x
x <-rnorm(10, mean = 20, sd=2)
x
# cbind and rbind in dataframe
rbind(students, data.frame(id=104, name='Joshua', score=89.35))
source('~/Documents/Code/MyProgramming/R/learning_R/dataframes.R')
# cbind and rbind in dataframe
rbind(students, data.frame(id=104, name='Joshua', score=89.35))
# Edit() function. edit(dataframe, factor, logical)
a <- edit(students)
# Edit() function. edit(dataframe, factor, logical)
a <- edit(students)
a
# Edit() function. edit(dataframe, factor, logical)
edit(students)
# Edit() function. edit(dataframe, factor, logical)
edit(students)
source('~/Documents/Code/MyProgramming/R/learning_R/dataframes.R')
# Edit() function. edit(dataframe, factor, logical)
edit(students)
# Edit() function. edit(dataframe, factor, logical)
view(students)
# Edit() function. edit(dataframe, factor, logical)
View(students)
# Edit() function. edit(dataframe, factor, logical)
edit(students)
# Edit() function. edit(dataframe, factor, logical)
Edit(students)
# Edit() function. edit(dataframe, factor, logical)
edit(students)
# Edit() function. edit(dataframe, factor, logical)
edit(students)
# Edit() function. edit(dataframe, factor, logical)
edit(students) # This opens the dataframe into an external R data editor, XQuartz in MacOS.
# Edit() function. edit(dataframe, factor, logical)
edit(students) # This opens the dataframe into an external R data editor, XQuartz in MacOS.
# With vectorized custamization and dummy data.
# Create the input vectors.
colors = c("green","orange","brown")
months <- c("Mar","Apr","May","Jun","Jul")
regions <- c("UK","USA","India")
# Create the matrix of the values.
revenue <- matrix(c(2,9,3,11,9,4,8,7,3,12,5,2,8,10,11), nrow = 3, ncol = 5, byrow = TRUE)
# chart file a name
png(file = "stacked_barchart.png")
# Create the bar chart
barplot(revenue, main = "Total Annual Revenue of IBM",
names.arg = months,
xlab = "month",
ylab = "Revenue (Billion)",
col = colors)
# Adding legend to the chart
legend("topleft", regions, cex = 1, fill = colors) # cex is the size of the legend.
# Save the file
dev.off()
# Create the bar chart
barplot(revenue, main = "Total Annual Revenue of IBM",
names.arg = months,
xlab = "month",
ylab = "Revenue (Billion)",
col = colors)
# Adding legend to the chart
legend("topleft", regions, cex = 1, fill = colors) # cex is the size of the legend.
revenue
mode(num) # Classification of objects, i.e. 'numeric', 'character', or 'logical'
# Variables
num = 45
typeof(num)
mode(num) # Classification of objects, i.e. 'numeric', 'character', or 'logical'
storage.mode(num) # gives the
class(num) # Also the classfication of objects
setwd("~/Documents/Code/MyProgramming/Languages/R/Learning")
library(dplyr)
df <- read.csv('data/murders.csv')
df
df_sub <- select(df, state, population, murders)
# Scatter plot
plot(
df_sub$population,
df_sub$murders,
xlab = 'Population',
ylab = 'Murders',
main = 'Population vs. Murders',
col = 'red',
pch = 20
) # R has some pre-defined signifiers for pch (plot charater).
# Line graph
plot(
df_sub$murders,
type = 'l',
xlab = 'States',
ylab = 'Murders',
main = 'States vs Murders',
col = 'blue'
)
# Creating one
id <- c(101, 102, 103)
name <- c('Bob', 'Alice', 'John')
score <- c(99.28, 97.45, 91.85)
students <- data.frame(id, name, score)
students
# Indexing dataframe
students[2, ] # Entire 2nd row
students[1:2,] # 1st and 2nd row
students[ ,1] # Entire first column
students[2] # 2nd column
students[[3]][1]
students$score
students$score[3]
students[-nrow(students), ] # Everything excepts the last row.
# Dataframe subset functions. Subset returns a subset of a dataframe that meets the condition
subset(students, score>92)
subset(students, score>92 & id<103)
subset(students, score>92, select = c(name, score))# Just the names of the subset that meets the condition
subset(students, score>93, select = name:score) # with seq also works
# cbind and rbind in dataframe
rbind(students, data.frame(id=104, name='Joshua', score=89.35))
cbind(students, age=c(18, 24, 19))
# Edit() function. edit(dataframe, factor, logical)
edit(students) # This opens the dataframe into an external R data editor, XQuartz in MacOS.
